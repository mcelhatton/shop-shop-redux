{"ast":null,"code":"var _jsxFileName = \"/Users/mcelhatton/Dropbox (Mobile Dealer Data)/Mac/Documents/Repos/shop-shop-redux/client/src/components/ProductList/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    // when there is data to be stored\n    if (data) {\n      // store in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      }); // and store it in IndexedDB\n\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      // if loading is undefined, the user is offline - get data from the `products` store in IndexedDB\n      idbPromise('products', 'get').then(products => {\n        // use the IndexedDB data to set the global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","UPDATE_PRODUCTS","idbPromise","useDispatch","useSelector","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"sources":["/Users/mcelhatton/Dropbox (Mobile Dealer Data)/Mac/Documents/Repos/shop-shop-redux/client/src/components/ProductList/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductList() {\n\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // when there is data to be stored\n    if (data) {\n      // store in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      // and store it in IndexedDB\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      // if loading is undefined, the user is offline - get data from the `products` store in IndexedDB\n      idbPromise('products', 'get').then((products) => {\n        // use the IndexedDB data to set the global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,SAASC,WAAT,GAAuB;EAErB,MAAMC,KAAK,GAAGF,WAAW,CAAEE,KAAD,IAAW;IACnC,OAAOA,KAAP;EACD,CAFwB,CAAzB;EAGA,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;EAEA,MAAM;IAAEK;EAAF,IAAsBF,KAA5B;EACA,MAAM;IAAEG,OAAF;IAAWC;EAAX,IAAoBb,QAAQ,CAACE,cAAD,CAAlC;EAEAH,SAAS,CAAC,MAAM;IACd;IACA,IAAIc,IAAJ,EAAU;MACR;MACAH,QAAQ,CAAC;QACPI,IAAI,EAAEV,eADC;QAEPW,QAAQ,EAAEF,IAAI,CAACE;MAFR,CAAD,CAAR,CAFQ,CAMR;;MACAF,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAa;QACjCZ,UAAU,CAAC,UAAD,EAAa,KAAb,EAAoBY,OAApB,CAAV;MACD,CAFD;IAGD,CAVD,MAUO,IAAI,CAACL,OAAL,EAAc;MACnB;MACAP,UAAU,CAAC,UAAD,EAAa,KAAb,CAAV,CAA8Ba,IAA9B,CAAoCH,QAAD,IAAc;QAC/C;QACAL,QAAQ,CAAC;UACPI,IAAI,EAAEV,eADC;UAEPW,QAAQ,EAAEA;QAFH,CAAD,CAAR;MAID,CAND;IAOD;EACF,CAtBQ,EAsBN,CAACF,IAAD,EAAOD,OAAP,EAAgBF,QAAhB,CAtBM,CAAT;;EAwBA,SAASS,cAAT,GAA0B;IACxB,IAAI,CAACR,eAAL,EAAsB;MACpB,OAAOF,KAAK,CAACM,QAAb;IACD;;IAED,OAAON,KAAK,CAACM,QAAN,CAAeK,MAAf,CAAsBH,OAAO,IAAIA,OAAO,CAACI,QAAR,CAAiBC,GAAjB,KAAyBX,eAA1D,CAAP;EACD;;EAED,oBACE;IAAK,SAAS,EAAC,MAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,mBADF,EAEGF,KAAK,CAACM,QAAN,CAAeQ,MAAf,gBACC;IAAK,SAAS,EAAC,UAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKJ,cAAc,GAAGK,GAAjB,CAAqBP,OAAO,iBACzB,oBAAC,WAAD;IACE,GAAG,EAAGA,OAAO,CAACK,GADhB;IAEE,GAAG,EAAEL,OAAO,CAACK,GAFf;IAGE,KAAK,EAAEL,OAAO,CAACQ,KAHjB;IAIE,IAAI,EAAER,OAAO,CAACS,IAJhB;IAKE,KAAK,EAAET,OAAO,CAACU,KALjB;IAME,QAAQ,EAAEV,OAAO,CAACW,QANpB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADH,CADL,CADD,gBAcC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,yCAhBJ,EAkBIhB,OAAO,gBACT;IAAK,GAAG,EAAET,OAAV;IAAmB,GAAG,EAAC,SAAvB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADS,GAC4B,IAnBvC,CADF;AAuBD;;AAED,eAAeK,WAAf"},"metadata":{},"sourceType":"module"}