{"ast":null,"code":"var _jsxFileName = \"/Users/mcelhatton/Dropbox (Mobile Dealer Data)/Mac/Documents/Repos/shop-shop-redux/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES); // Update the state with the categories upon page load or change\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch to update the state with the UPDATE_CATEGORIES action\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      }); // also store the category data in IndexedDB\n\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      // if the user is offline, load data from IndexedDB\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"names":["React","useEffect","useQuery","QUERY_CATEGORIES","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","idbPromise","useDispatch","useSelector","CategoryMenu","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"sources":["/Users/mcelhatton/Dropbox (Mobile Dealer Data)/Mac/Documents/Repos/shop-shop-redux/client/src/components/CategoryMenu/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const state = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  // Update the state with the categories upon page load or change\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch to update the state with the UPDATE_CATEGORIES action\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    // also store the category data in IndexedDB\n    categoryData.categories.forEach(category => {\n      idbPromise('categories', 'put', category);\n    });\n    } else if (!loading) {\n      // if the user is offline, load data from IndexedDB\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch])\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,SAASC,YAAT,GAAwB;EACtB,MAAMC,KAAK,GAAGF,WAAW,CAAEE,KAAD,IAAW;IACnC,OAAOA,KAAP;EACD,CAFwB,CAAzB;EAGA,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;EAEA,MAAM;IAAEK;EAAF,IAAiBF,KAAvB;EACA,MAAM;IAAEG,OAAF;IAAWC,IAAI,EAAEC;EAAjB,IAAkCb,QAAQ,CAACC,gBAAD,CAAhD,CAPsB,CAStB;;EACAF,SAAS,CAAC,MAAM;IACd;IACA,IAAIc,YAAJ,EAAkB;MAChBJ,QAAQ,CAAC;QACPK,IAAI,EAAEZ,iBADC;QAEPQ,UAAU,EAAEG,YAAY,CAACH;MAFlB,CAAD,CAAR,CADgB,CAKlB;;MACAG,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;QAC1CZ,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBY,QAAtB,CAAV;MACD,CAFD;IAGC,CATD,MASO,IAAI,CAACL,OAAL,EAAc;MACnB;MACAP,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCa,IAAhC,CAAqCP,UAAU,IAAI;QACjDD,QAAQ,CAAC;UACPK,IAAI,EAAEZ,iBADC;UAEPQ,UAAU,EAAEA;QAFL,CAAD,CAAR;MAID,CALD;IAMD;EACF,CApBQ,EAoBN,CAACG,YAAD,EAAeF,OAAf,EAAwBF,QAAxB,CApBM,CAAT;;EAsBA,MAAMS,WAAW,GAAGC,EAAE,IAAI;IACxBV,QAAQ,CAAC;MACPK,IAAI,EAAEX,uBADC;MAEPiB,eAAe,EAAED;IAFV,CAAD,CAAR;EAID,CALD;;EAOA,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,wBADF,EAEGT,UAAU,CAACW,GAAX,CAAeC,IAAI,iBAClB;IACE,GAAG,EAAEA,IAAI,CAACC,GADZ;IAEE,OAAO,EAAE,MAAM;MACbL,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;IACD,CAJH;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAejB,YAAf"},"metadata":{},"sourceType":"module"}