{"ast":null,"code":"import { combineReducers, createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nimport seed from \"./seed\";\n\nconst board = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    lists: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        const {\n          listId\n        } = action.payload;\n        return {\n          lists: [...state.lists, listId]\n        };\n      }\n\n    case \"MOVE_LIST\":\n      {\n        const {\n          oldListIndex,\n          newListIndex\n        } = action.payload;\n        const newLists = Array.from(state.lists);\n        const [removedList] = newLists.splice(oldListIndex, 1);\n        newLists.splice(newListIndex, 0, removedList);\n        return {\n          lists: newLists\n        };\n      }\n\n    case \"DELETE_LIST\":\n      {\n        const {\n          listId\n        } = action.payload;\n\n        const filterDeleted = tmpListId => tmpListId !== listId;\n\n        const newLists = state.lists.filter(filterDeleted);\n        return {\n          lists: newLists\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst listsById = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        const {\n          listId,\n          listTitle\n        } = action.payload;\n        return { ...state,\n          [listId]: {\n            _id: listId,\n            title: listTitle,\n            cards: []\n          }\n        };\n      }\n\n    case \"CHANGE_LIST_TITLE\":\n      {\n        const {\n          listId,\n          listTitle\n        } = action.payload;\n        return { ...state,\n          [listId]: { ...state[listId],\n            title: listTitle\n          }\n        };\n      }\n\n    case \"DELETE_LIST\":\n      {\n        const {\n          listId\n        } = action.payload;\n        const {\n          [listId]: deletedList,\n          ...restOfLists\n        } = state;\n        return restOfLists;\n      }\n\n    case \"ADD_CARD\":\n      {\n        const {\n          listId,\n          cardId\n        } = action.payload;\n        return { ...state,\n          [listId]: { ...state[listId],\n            cards: [...state[listId].cards, cardId]\n          }\n        };\n      }\n\n    case \"MOVE_CARD\":\n      {\n        const {\n          oldCardIndex,\n          newCardIndex,\n          sourceListId,\n          destListId\n        } = action.payload; // Move within the same list\n\n        if (sourceListId === destListId) {\n          const newCards = Array.from(state[sourceListId].cards);\n          const [removedCard] = newCards.splice(oldCardIndex, 1);\n          newCards.splice(newCardIndex, 0, removedCard);\n          return { ...state,\n            [sourceListId]: { ...state[sourceListId],\n              cards: newCards\n            }\n          };\n        } // Move card from one list to another\n\n\n        const sourceCards = Array.from(state[sourceListId].cards);\n        const [removedCard] = sourceCards.splice(oldCardIndex, 1);\n        const destinationCards = Array.from(state[destListId].cards);\n        destinationCards.splice(newCardIndex, 0, removedCard);\n        return { ...state,\n          [sourceListId]: { ...state[sourceListId],\n            cards: sourceCards\n          },\n          [destListId]: { ...state[destListId],\n            cards: destinationCards\n          }\n        };\n      }\n\n    case \"DELETE_CARD\":\n      {\n        const {\n          cardId: deletedCardId,\n          listId\n        } = action.payload;\n\n        const filterDeleted = cardId => cardId !== deletedCardId;\n\n        return { ...state,\n          [listId]: { ...state[listId],\n            cards: state[listId].cards.filter(filterDeleted)\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst cardsById = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_CARD\":\n      {\n        const {\n          cardText,\n          cardId\n        } = action.payload;\n        return { ...state,\n          [cardId]: {\n            text: cardText,\n            _id: cardId\n          }\n        };\n      }\n\n    case \"CHANGE_CARD_TEXT\":\n      {\n        const {\n          cardText,\n          cardId\n        } = action.payload;\n        return { ...state,\n          [cardId]: { ...state[cardId],\n            text: cardText\n          }\n        };\n      }\n\n    case \"DELETE_CARD\":\n      {\n        const {\n          cardId\n        } = action.payload;\n        const {\n          [cardId]: deletedCard,\n          ...restOfCards\n        } = state;\n        return restOfCards;\n      }\n    // Find every card from the deleted list and remove it\n\n    case \"DELETE_LIST\":\n      {\n        const {\n          cards: cardIds\n        } = action.payload;\n        return Object.keys(state).filter(cardId => !cardIds.includes(cardId)).reduce((newState, cardId) => ({ ...newState,\n          [cardId]: state[cardId]\n        }), {});\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  board,\n  listsById,\n  cardsById\n});\n\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch {// ignore write errors\n  }\n};\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst persistedState = loadState();\nconst store = createStore(reducers, persistedState);\nstore.subscribe(throttle(() => {\n  saveState(store.getState());\n}, 1000));\nconsole.log(store.getState());\n\nif (!store.getState().board.lists.length) {\n  console.log(\"SEED\");\n  seed(store);\n}\n\nexport default store;","map":{"version":3,"names":["combineReducers","createStore","throttle","seed","board","state","lists","action","type","listId","payload","oldListIndex","newListIndex","newLists","Array","from","removedList","splice","filterDeleted","tmpListId","filter","listsById","listTitle","_id","title","cards","deletedList","restOfLists","cardId","oldCardIndex","newCardIndex","sourceListId","destListId","newCards","removedCard","sourceCards","destinationCards","deletedCardId","cardsById","cardText","text","deletedCard","restOfCards","cardIds","Object","keys","includes","reduce","newState","reducers","saveState","serializedState","JSON","stringify","localStorage","setItem","loadState","getItem","undefined","parse","err","persistedState","store","subscribe","getState","console","log","length"],"sources":["/Users/mcelhatton/Dropbox (Mobile Dealer Data)/Mac/Documents/Repos/shop-shop-redux/client/src/store.js"],"sourcesContent":["import { combineReducers, createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nimport seed from \"./seed\";\n\nconst board = (state = { lists: [] }, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      const { listId } = action.payload;\n      return { lists: [...state.lists, listId] };\n    }\n    case \"MOVE_LIST\": {\n      const { oldListIndex, newListIndex } = action.payload;\n      const newLists = Array.from(state.lists);\n      const [removedList] = newLists.splice(oldListIndex, 1);\n      newLists.splice(newListIndex, 0, removedList);\n      return { lists: newLists };\n    }\n    case \"DELETE_LIST\": {\n      const { listId } = action.payload;\n      const filterDeleted = tmpListId => tmpListId !== listId;\n      const newLists = state.lists.filter(filterDeleted);\n      return { lists: newLists };\n    }\n    default:\n      return state;\n  }\n};\n\nconst listsById = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      const { listId, listTitle } = action.payload;\n      return {\n        ...state,\n        [listId]: { _id: listId, title: listTitle, cards: [] }\n      };\n    }\n    case \"CHANGE_LIST_TITLE\": {\n      const { listId, listTitle } = action.payload;\n      return {\n        ...state,\n        [listId]: { ...state[listId], title: listTitle }\n      };\n    }\n    case \"DELETE_LIST\": {\n      const { listId } = action.payload;\n      const { [listId]: deletedList, ...restOfLists } = state;\n      return restOfLists;\n    }\n    case \"ADD_CARD\": {\n      const { listId, cardId } = action.payload;\n      return {\n        ...state,\n        [listId]: { ...state[listId], cards: [...state[listId].cards, cardId] }\n      };\n    }\n    case \"MOVE_CARD\": {\n      const {\n        oldCardIndex,\n        newCardIndex,\n        sourceListId,\n        destListId\n      } = action.payload;\n      // Move within the same list\n      if (sourceListId === destListId) {\n        const newCards = Array.from(state[sourceListId].cards);\n        const [removedCard] = newCards.splice(oldCardIndex, 1);\n        newCards.splice(newCardIndex, 0, removedCard);\n        return {\n          ...state,\n          [sourceListId]: { ...state[sourceListId], cards: newCards }\n        };\n      }\n      // Move card from one list to another\n      const sourceCards = Array.from(state[sourceListId].cards);\n      const [removedCard] = sourceCards.splice(oldCardIndex, 1);\n      const destinationCards = Array.from(state[destListId].cards);\n      destinationCards.splice(newCardIndex, 0, removedCard);\n      return {\n        ...state,\n        [sourceListId]: { ...state[sourceListId], cards: sourceCards },\n        [destListId]: { ...state[destListId], cards: destinationCards }\n      };\n    }\n    case \"DELETE_CARD\": {\n      const { cardId: deletedCardId, listId } = action.payload;\n      const filterDeleted = cardId => cardId !== deletedCardId;\n      return {\n        ...state,\n        [listId]: {\n          ...state[listId],\n          cards: state[listId].cards.filter(filterDeleted)\n        }\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst cardsById = (state = {}, action) => {\n  switch (action.type) {\n    case \"ADD_CARD\": {\n      const { cardText, cardId } = action.payload;\n      return { ...state, [cardId]: { text: cardText, _id: cardId } };\n    }\n    case \"CHANGE_CARD_TEXT\": {\n      const { cardText, cardId } = action.payload;\n      return { ...state, [cardId]: { ...state[cardId], text: cardText } };\n    }\n    case \"DELETE_CARD\": {\n      const { cardId } = action.payload;\n      const { [cardId]: deletedCard, ...restOfCards } = state;\n      return restOfCards;\n    }\n    // Find every card from the deleted list and remove it\n    case \"DELETE_LIST\": {\n      const { cards: cardIds } = action.payload;\n      return Object.keys(state)\n        .filter(cardId => !cardIds.includes(cardId))\n        .reduce(\n          (newState, cardId) => ({ ...newState, [cardId]: state[cardId] }),\n          {}\n        );\n    }\n    default:\n      return state;\n  }\n};\n\nconst reducers = combineReducers({\n  board,\n  listsById,\n  cardsById\n});\n\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch {\n    // ignore write errors\n  }\n};\n\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(\"state\");\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst persistedState = loadState();\nconst store = createStore(reducers, persistedState);\n\nstore.subscribe(\n  throttle(() => {\n    saveState(store.getState());\n  }, 1000)\n);\n\nconsole.log(store.getState());\nif (!store.getState().board.lists.length) {\n  console.log(\"SEED\");\n  seed(store);\n}\n\nexport default store;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}