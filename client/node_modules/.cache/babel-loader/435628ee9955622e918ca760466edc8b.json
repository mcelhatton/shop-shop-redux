{"ast":null,"code":"// import actions\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions'; // Set default state  \n\nconst defaultState = {\n  products: [],\n  categories: [],\n  currentCategory: '',\n  cart: [],\n  cartOpen: false\n}; // Root reducer\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // if the action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if the action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n    // if the action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new state object with an updated currentCategory value\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n    // if the action type is ADD_TO_CART, return a new state object with the updated cart object\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    // if the action type is ADD_MULTIPLE_TO_CART, return a new state object with the updated cart object\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // if the action type is REMOVE_FROM_CART, return a new state object with the updated cart and close the cart if last item is removed\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    // if the action type is UPDATE_CART_QUANTITY, return a new state object with the updated cart, updating only the quantity of the specified\n    // product ID and returning product for unchanged products\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n    // if the action type is CLEAR_CART, return a new state object with the cart emptied and closed\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n    // if the action type is TOGGLE_CART, return a new state object with the cartOpen property toggled\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n    // if it's none of these actions, do not update the state and just return the current state\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","defaultState","products","categories","currentCategory","cart","cartOpen","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity"],"sources":["/Users/mcelhatton/Dropbox (Mobile Dealer Data)/Mac/Documents/Repos/shop-shop-redux/client/src/utils/reducers.js"],"sourcesContent":["// import actions\nimport {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANTITY,\n    CLEAR_CART,\n    TOGGLE_CART\n  } from './actions';\n\n// Set default state  \nconst defaultState = {\n    products: [],\n    categories: [],\n    currentCategory: '',\n    cart: [],\n    cartOpen: false\n}\n\n// Root reducer\nconst reducer = (state=defaultState, action) => {\n    switch (action.type) {\n        // if the action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n        // if the action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        // if the action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new state object with an updated currentCategory value\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        // if the action type is ADD_TO_CART, return a new state object with the updated cart object\n        case ADD_TO_CART:\n            return {\n              ...state,\n              cartOpen: true,\n              cart: [...state.cart, action.product]  \n            };\n        // if the action type is ADD_MULTIPLE_TO_CART, return a new state object with the updated cart object\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.products]\n            };\n        // if the action type is REMOVE_FROM_CART, return a new state object with the updated cart and close the cart if last item is removed\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n            });\n            \n            return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n            };\n        // if the action type is UPDATE_CART_QUANTITY, return a new state object with the updated cart, updating only the quantity of the specified\n        // product ID and returning product for unchanged products\n        case UPDATE_CART_QUANTITY:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                        product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                })\n            };\n        // if the action type is CLEAR_CART, return a new state object with the cart emptied and closed\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n        // if the action type is TOGGLE_CART, return a new state object with the cartOpen property toggled\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n        // if it's none of these actions, do not update the state and just return the current state\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"],"mappings":"AAAA;AACA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUS,WAVT,C,CAYA;;AACA,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,EADO;EAEjBC,UAAU,EAAE,EAFK;EAGjBC,eAAe,EAAE,EAHA;EAIjBC,IAAI,EAAE,EAJW;EAKjBC,QAAQ,EAAE;AALO,CAArB,C,CAQA;;AACA,MAAMC,OAAO,GAAG,YAAgC;EAAA,IAA/BC,KAA+B,uEAAzBP,YAAyB;EAAA,IAAXQ,MAAW;;EAC5C,QAAQA,MAAM,CAACC,IAAf;IACI;IACA,KAAKlB,eAAL;MACI,OAAO,EACH,GAAGgB,KADA;QAEHN,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;MAFP,CAAP;IAIJ;;IACA,KAAKT,iBAAL;MACI,OAAO,EACH,GAAGe,KADA;QAEHL,UAAU,EAAE,CAAC,GAAGM,MAAM,CAACN,UAAX;MAFT,CAAP;IAIJ;;IACA,KAAKT,uBAAL;MACI,OAAO,EACH,GAAGc,KADA;QAEHJ,eAAe,EAAEK,MAAM,CAACL;MAFrB,CAAP;IAIJ;;IACA,KAAKT,WAAL;MACI,OAAO,EACL,GAAGa,KADE;QAELF,QAAQ,EAAE,IAFL;QAGLD,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgBI,MAAM,CAACE,OAAvB;MAHD,CAAP;IAKJ;;IACA,KAAKf,oBAAL;MACI,OAAO,EACH,GAAGY,KADA;QAEHH,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgB,GAAGI,MAAM,CAACP,QAA1B;MAFH,CAAP;IAIJ;;IACA,KAAKL,gBAAL;MACI,IAAIe,QAAQ,GAAGJ,KAAK,CAACH,IAAN,CAAWQ,MAAX,CAAkBF,OAAO,IAAI;QACxC,OAAOA,OAAO,CAACG,GAAR,KAAgBL,MAAM,CAACK,GAA9B;MACH,CAFc,CAAf;MAIA,OAAO,EACH,GAAGN,KADA;QAEHF,QAAQ,EAAEM,QAAQ,CAACG,MAAT,GAAkB,CAFzB;QAGHV,IAAI,EAAEO;MAHH,CAAP;IAKJ;IACA;;IACA,KAAKd,oBAAL;MACI,OAAO,EACH,GAAGU,KADA;QAEHF,QAAQ,EAAE,IAFP;QAGHD,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWW,GAAX,CAAeL,OAAO,IAAI;UAC5B,IAAIF,MAAM,CAACK,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;YAC5BH,OAAO,CAACM,gBAAR,GAA2BR,MAAM,CAACQ,gBAAlC;UACH;;UACD,OAAON,OAAP;QACH,CALK;MAHH,CAAP;IAUJ;;IACA,KAAKZ,UAAL;MACI,OAAO,EACH,GAAGS,KADA;QAEHF,QAAQ,EAAE,KAFP;QAGHD,IAAI,EAAE;MAHH,CAAP;IAKJ;;IACA,KAAKL,WAAL;MACI,OAAO,EACH,GAAGQ,KADA;QAEHF,QAAQ,EAAE,CAACE,KAAK,CAACF;MAFd,CAAP;IAIJ;;IACA;MACI,OAAOE,KAAP;EAvER;AAyEH,CA1ED;;AA4EA,eAAeD,OAAf"},"metadata":{},"sourceType":"module"}